<?php

namespace SIV\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * VisitesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VisitesRepository extends EntityRepository
{
    public function getEmpVisiteurs($user){

        $queryBuilder = $this
            ->createQueryBuilder('v')
            ->join('v.hote', 'h')
            ->addSelect('h')
            ->Where('h.id = :user')
            ->andWhere('v.heureSortie = :vide')
            ->andWhere('v.dateSortie = :vide')
            ->orderBy('v.dateEntree', 'ASC')
            ->setParameters(array( 'user' => $user, 'vide' => 'null'));
        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        // On récupère les résultats à partir de la Query
        $results = $query->getResult();
        // $results = $results[;


        //dump($results); exit;
        return $results;
    }

    public function getPresent(){

        $queryBuilder = $this
            ->createQueryBuilder('v')
            ->join('v.hote', 'h')
            ->addSelect('h')
            ->andWhere('v.heureSortie = :vide')
            ->andWhere('v.dateSortie = :vide')
            ->orderBy('v.dateEntree', 'ASC')
            ->setParameters(array( 'vide' => 'null'));
        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        // On récupère les résultats à partir de la Query
        $results = $query->getResult();
        // $results = $results[;


        //dump($results); exit;
        return $results;

    }

    public function findEmpVisiteHistory($user){

        $queryBuilder = $this
            ->createQueryBuilder('v')
            ->join('v.hote', 'h')
            ->addSelect('h')
            ->Where('h.id = :user')
            ->orderBy('v.dateEntree', 'ASC')
            ->setParameters(array( 'user' => $user));
        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        // On récupère les résultats à partir de la Query
        $results = $query->getResult();
        // $results = $results[;


        //dump($results); exit;
        return $results;
    }

    public function getMonthlyVisitors(){

        $queryBuilder = $this
            ->createQueryBuilder('v')
            ->where('v.dateEntree BETWEEN :from AND :to')

            ->setParameters(array(
                'from' => date('Y-m-d',strtotime('first day of this month')),
                'to'  => date('Y-m-d',strtotime('last day of this month'))
            ));
        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        // On récupère les résultats à partir de la Query
        $results = $query->getResult();


        //dump($results); exit;
        return $results;

    }

    public function getPresentVisitors(){

        $queryBuilder = $this
            ->createQueryBuilder('v')
            ->where('v.dateEntree = :today')
            ->andWhere('v.dateSortie = :null')

            ->setParameters(array(
                'today' => date('Y-m-d',strtotime('today')),
                'null'  => 'null'
            ));
        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        // On récupère les résultats à partir de la Query
        $results = $query->getResult();


        //dump($results); exit;
        return $results;

    }

    public function getTodayVisitors(){

        $queryBuilder = $this
            ->createQueryBuilder('v')
            ->where('v.dateEntree = :today')
            ->andWhere('v.dateSortie = :null')

            ->setParameters(array(
                'today' => date('Y-m-d',strtotime('today')),
                'null'  => 'null'
            ));
        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        // On récupère les résultats à partir de la Query
        $results = $query->getResult();


        //dump($results); exit;
        return $results;

    }



    public function dailyVisitors($from = null, $to = null){
        //dump($from); exit;

        if($from and $to){
            $sql = "SELECT count(v.id) as nb, v.date_entree FROM visites v
                  join users h on h.id = v.hote_id
                WHERE date(v.date_entree) BETWEEN $from and $to
                GROUP BY date(v.date_entree)
                ";
            $connection = $this->_em->getConnection();
            $query = $connection->prepare($sql);
            $query->execute();
            $result = $query->fetchAll();

            //dump($result[0]); exit;

            return $result;
        }else{

            $sql = "SELECT count(v.id) as nb, v.date_entree FROM visites v
                  join users h on h.id = v.hote_id

                GROUP BY date(v.date_entree)

                ";
            $connection = $this->_em->getConnection();
            $query = $connection->prepare($sql);
            $query->execute();
            $result = $query->fetchAll();

            //dump($result[0]); exit;

            return $result;

        }
    }


}
